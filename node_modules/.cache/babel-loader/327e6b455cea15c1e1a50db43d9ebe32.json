{"ast":null,"code":"import _classCallCheck from \"/home/sarah/Documents/Workspaces/Projet 2/Paris-Weather-time/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sarah/Documents/Workspaces/Projet 2/Paris-Weather-time/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sarah/Documents/Workspaces/Projet 2/Paris-Weather-time/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sarah/Documents/Workspaces/Projet 2/Paris-Weather-time/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sarah/Documents/Workspaces/Projet 2/Paris-Weather-time/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sarah/Documents/Workspaces/Projet 2/Paris-Weather-time/src/components/WeatherAPI.js\";\nimport React from \"react\";\nimport Form from \"./Form\";\nimport WeatherDiv from \"./WeatherDiv\";\nimport \"./Form.css\";\n\nvar WeatherAPI =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WeatherAPI, _React$Component);\n\n  function WeatherAPI() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, WeatherAPI);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WeatherAPI)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      city: '',\n      lat: '',\n      loading: true,\n      lon: '',\n      weatherData: []\n    };\n\n    _this.getWeather = function (e) {\n      if (_this.state.loading) {\n        fetch(\"http://api.openweathermap.org/data/2.5/forecast?lat=\".concat(_this.state.lat, \"&lon=\").concat(_this.state.lon, \"&lang=fr&units=metric&appid=e8fc88dd5f1edd7f7ff6a9a5be06bd83\")).then(function (res) {\n          return res.json();\n        }) //permet de remplir le tableau weatherData dans le state et de desactiver loading - voir le if/else au début du render\n        .then(function (res) {\n          return _this.setState({\n            weatherData: res,\n            loading: false,\n            city: res.city.name\n          });\n        });\n      } else {\n        // s'active quand le bouton de Form.js est activé, celui-ci appelant la fonction getWeather et le loading étant false après le premier chargement de la page\n        e.preventDefault();\n        var city = e.target.city.value;\n        fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=\".concat(city, \"&lang=fr&units=metric&appid=e8fc88dd5f1edd7f7ff6a9a5be06bd83\")).then(function (res) {\n          return res.json();\n        }).then(function (res) {\n          return _this.setState({\n            weatherData: res,\n            city: res.city.name\n          });\n        });\n      }\n    };\n\n    _this.getLocation = function () {\n      //si l'utilisateur accepte d'être géolocalisé\n      if (navigator.geolocation) {\n        //getCurrentPosition permet de retourner un objet position qui donne notamment les coordonnées\n        navigator.geolocation.getCurrentPosition(function (position) {\n          _this.setState({\n            lon: position.coords.longitude,\n            lat: position.coords.latitude\n          }); //Attention cette ligne est importante, elle permet de s'assurer que getWeather ne s'active que après avoir obtenu la geolocalisation\n\n\n          _this.getWeather();\n        });\n      } else {//alerte qui s'active si l'utilisateur n'accepte pas d'être géolocalisé\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(WeatherAPI, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getLocation();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.state.city); //le if/else, permet de s'assurer que le render ne s'active que quand l'API a bien chargé ses données dans le state et donc transformé loading en false\n\n      if (this.state.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, \"loading\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, React.createElement(Form, {\n          getWeather: this.getWeather,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, this.state.weatherData.list.filter(function (data) {\n          return data.dt_txt.includes(\"12:00:00\");\n        }).map(function (data, index) {\n          return React.createElement(WeatherDiv, Object.assign({}, data, {\n            city: _this2.state.city,\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }));\n        })));\n      }\n    }\n  }]);\n\n  return WeatherAPI;\n}(React.Component);\n\n;\nexport default WeatherAPI;","map":{"version":3,"sources":["/home/sarah/Documents/Workspaces/Projet 2/Paris-Weather-time/src/components/WeatherAPI.js"],"names":["React","Form","WeatherDiv","WeatherAPI","state","city","lat","loading","lon","weatherData","getWeather","e","fetch","then","res","json","setState","name","preventDefault","target","value","getLocation","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","console","log","list","filter","data","dt_txt","includes","map","index","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Form from \"./Form\";\nimport WeatherDiv from \"./WeatherDiv\";\nimport \"./Form.css\"\n\nclass WeatherAPI extends React.Component {\n  state = {\n    city: '',\n    lat: '',\n    loading: true,\n    lon: '',\n    weatherData: []\n  }\n  \n  getWeather = (e) => {\n    if (this.state.loading) {\n      fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${this.state.lat}&lon=${this.state.lon}&lang=fr&units=metric&appid=e8fc88dd5f1edd7f7ff6a9a5be06bd83`)\n        .then(res => res.json())\n        //permet de remplir le tableau weatherData dans le state et de desactiver loading - voir le if/else au début du render\n        .then(res => this.setState({ weatherData: res, loading: false, city: res.city.name}))\n    } else {\n      // s'active quand le bouton de Form.js est activé, celui-ci appelant la fonction getWeather et le loading étant false après le premier chargement de la page\n      e.preventDefault();\n      const city = e.target.city.value;\n      fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&lang=fr&units=metric&appid=e8fc88dd5f1edd7f7ff6a9a5be06bd83`)\n        .then(res => res.json())\n        .then(res => this.setState({ weatherData: res, city: res.city.name}))\n    }\n  }\n  //fonction qui permet d'obtenir la localisation\n  getLocation = () => {\n    //si l'utilisateur accepte d'être géolocalisé\n    if (navigator.geolocation) {\n      //getCurrentPosition permet de retourner un objet position qui donne notamment les coordonnées\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({ lon: position.coords.longitude, lat: position.coords.latitude })\n        //Attention cette ligne est importante, elle permet de s'assurer que getWeather ne s'active que après avoir obtenu la geolocalisation\n        this.getWeather()\n      })\n    } else {\n      //alerte qui s'active si l'utilisateur n'accepte pas d'être géolocalisé\n\n    }\n  }\n\n  componentDidMount() {\n    this.getLocation()\n  }\n\n  render() {\n    console.log(this.state.city)\n    //le if/else, permet de s'assurer que le render ne s'active que quand l'API a bien chargé ses données dans le state et donc transformé loading en false\n    if (this.state.loading) {\n      return (<div>loading</div>)\n    } else {\n      return (\n        <div>\n          <div>\n            <Form getWeather={this.getWeather} />\n          </div>\n          <div>\n    {/*le filter map permet de ne sélectionner que une prévision par jour dans le tableau d'objets list contenu dans l'objet weatherData. Autrement list contient des prévisions toutes les trois heures. */}\n          {this.state.weatherData.list\n          .filter(data => data.dt_txt.includes(\"12:00:00\"))\n          .map((data,index) => (\n            <WeatherDiv {...data} city={this.state.city} key={index}/>\n\n        ))}\n\n          </div>\n        </div>\n      );\n    }\n  }\n};\n\nexport default WeatherAPI ;\n"]},"metadata":{},"sourceType":"module"}